// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/consultation/page.tsx
{
  const handler = {} as typeof import("../../src/app/consultation/page.js")
  handler satisfies AppPageConfig<"/consultation">
}

// Validate ../../src/app/diary/new/page.tsx
{
  const handler = {} as typeof import("../../src/app/diary/new/page.js")
  handler satisfies AppPageConfig<"/diary/new">
}

// Validate ../../src/app/emotions/page.tsx
{
  const handler = {} as typeof import("../../src/app/emotions/page.js")
  handler satisfies AppPageConfig<"/emotions">
}

// Validate ../../src/app/export/page.tsx
{
  const handler = {} as typeof import("../../src/app/export/page.js")
  handler satisfies AppPageConfig<"/export">
}

// Validate ../../src/app/mindmap-merge/page.tsx
{
  const handler = {} as typeof import("../../src/app/mindmap-merge/page.js")
  handler satisfies AppPageConfig<"/mindmap-merge">
}

// Validate ../../src/app/mindmap/page.tsx
{
  const handler = {} as typeof import("../../src/app/mindmap/page.js")
  handler satisfies AppPageConfig<"/mindmap">
}

// Validate ../../src/app/page.tsx
{
  const handler = {} as typeof import("../../src/app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../src/app/search/page.tsx
{
  const handler = {} as typeof import("../../src/app/search/page.js")
  handler satisfies AppPageConfig<"/search">
}

// Validate ../../src/app/self-pr/page.tsx
{
  const handler = {} as typeof import("../../src/app/self-pr/page.js")
  handler satisfies AppPageConfig<"/self-pr">
}

// Validate ../../src/app/test-mindmap/page.tsx
{
  const handler = {} as typeof import("../../src/app/test-mindmap/page.js")
  handler satisfies AppPageConfig<"/test-mindmap">
}

// Validate ../../src/app/timeline/page.tsx
{
  const handler = {} as typeof import("../../src/app/timeline/page.js")
  handler satisfies AppPageConfig<"/timeline">
}

// Validate ../../src/app/words/page.tsx
{
  const handler = {} as typeof import("../../src/app/words/page.js")
  handler satisfies AppPageConfig<"/words">
}

// Validate ../../src/app/api/ai/answer-analysis/route.ts
{
  const handler = {} as typeof import("../../src/app/api/ai/answer-analysis/route.js")
  handler satisfies RouteHandlerConfig<"/api/ai/answer-analysis">
}

// Validate ../../src/app/api/ai/consultation/route.ts
{
  const handler = {} as typeof import("../../src/app/api/ai/consultation/route.js")
  handler satisfies RouteHandlerConfig<"/api/ai/consultation">
}

// Validate ../../src/app/api/ai/dialogue/route.ts
{
  const handler = {} as typeof import("../../src/app/api/ai/dialogue/route.js")
  handler satisfies RouteHandlerConfig<"/api/ai/dialogue">
}

// Validate ../../src/app/api/ai/dialogue/summarize/route.ts
{
  const handler = {} as typeof import("../../src/app/api/ai/dialogue/summarize/route.js")
  handler satisfies RouteHandlerConfig<"/api/ai/dialogue/summarize">
}

// Validate ../../src/app/api/ai/emotions/route.ts
{
  const handler = {} as typeof import("../../src/app/api/ai/emotions/route.js")
  handler satisfies RouteHandlerConfig<"/api/ai/emotions">
}

// Validate ../../src/app/api/ai/generate-pr/route.ts
{
  const handler = {} as typeof import("../../src/app/api/ai/generate-pr/route.js")
  handler satisfies RouteHandlerConfig<"/api/ai/generate-pr">
}

// Validate ../../src/app/api/ai/questions/route.ts
{
  const handler = {} as typeof import("../../src/app/api/ai/questions/route.js")
  handler satisfies RouteHandlerConfig<"/api/ai/questions">
}

// Validate ../../src/app/api/diary/route.ts
{
  const handler = {} as typeof import("../../src/app/api/diary/route.js")
  handler satisfies RouteHandlerConfig<"/api/diary">
}

// Validate ../../src/app/api/emotions/aggregate/route.ts
{
  const handler = {} as typeof import("../../src/app/api/emotions/aggregate/route.js")
  handler satisfies RouteHandlerConfig<"/api/emotions/aggregate">
}

// Validate ../../src/app/api/init-user/route.ts
{
  const handler = {} as typeof import("../../src/app/api/init-user/route.js")
  handler satisfies RouteHandlerConfig<"/api/init-user">
}

// Validate ../../src/app/api/search/route.ts
{
  const handler = {} as typeof import("../../src/app/api/search/route.js")
  handler satisfies RouteHandlerConfig<"/api/search">
}

// Validate ../../src/app/api/test-db/route.ts
{
  const handler = {} as typeof import("../../src/app/api/test-db/route.js")
  handler satisfies RouteHandlerConfig<"/api/test-db">
}





// Validate ../../src/app/layout.tsx
{
  const handler = {} as typeof import("../../src/app/layout.js")
  handler satisfies LayoutConfig<"/">
}
